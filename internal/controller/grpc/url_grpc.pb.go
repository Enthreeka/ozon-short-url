// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: proto/v1/url.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UrlShortenService_CreateShortUrl_FullMethodName = "/url.UrlShortenService/CreateShortUrl"
	UrlShortenService_GetOriginalUrl_FullMethodName = "/url.UrlShortenService/GetOriginalUrl"
)

// UrlShortenServiceClient is the client API for UrlShortenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlShortenServiceClient interface {
	CreateShortUrl(ctx context.Context, in *OriginalUrlRequest, opts ...grpc.CallOption) (*ShortUrlResponse, error)
	GetOriginalUrl(ctx context.Context, in *ShortUrlRequest, opts ...grpc.CallOption) (*OriginalUrlResponse, error)
}

type urlShortenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlShortenServiceClient(cc grpc.ClientConnInterface) UrlShortenServiceClient {
	return &urlShortenServiceClient{cc}
}

func (c *urlShortenServiceClient) CreateShortUrl(ctx context.Context, in *OriginalUrlRequest, opts ...grpc.CallOption) (*ShortUrlResponse, error) {
	out := new(ShortUrlResponse)
	err := c.cc.Invoke(ctx, UrlShortenService_CreateShortUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenServiceClient) GetOriginalUrl(ctx context.Context, in *ShortUrlRequest, opts ...grpc.CallOption) (*OriginalUrlResponse, error) {
	out := new(OriginalUrlResponse)
	err := c.cc.Invoke(ctx, UrlShortenService_GetOriginalUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlShortenServiceServer is the server API for UrlShortenService service.
// All implementations must embed UnimplementedUrlShortenServiceServer
// for forward compatibility
type UrlShortenServiceServer interface {
	CreateShortUrl(context.Context, *OriginalUrlRequest) (*ShortUrlResponse, error)
	GetOriginalUrl(context.Context, *ShortUrlRequest) (*OriginalUrlResponse, error)
	mustEmbedUnimplementedUrlShortenServiceServer()
}

// UnimplementedUrlShortenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUrlShortenServiceServer struct {
}

func (UnimplementedUrlShortenServiceServer) CreateShortUrl(context.Context, *OriginalUrlRequest) (*ShortUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortUrl not implemented")
}
func (UnimplementedUrlShortenServiceServer) GetOriginalUrl(context.Context, *ShortUrlRequest) (*OriginalUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalUrl not implemented")
}
func (UnimplementedUrlShortenServiceServer) mustEmbedUnimplementedUrlShortenServiceServer() {}

// UnsafeUrlShortenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlShortenServiceServer will
// result in compilation errors.
type UnsafeUrlShortenServiceServer interface {
	mustEmbedUnimplementedUrlShortenServiceServer()
}

func RegisterUrlShortenServiceServer(s grpc.ServiceRegistrar, srv UrlShortenServiceServer) {
	s.RegisterService(&UrlShortenService_ServiceDesc, srv)
}

func _UrlShortenService_CreateShortUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OriginalUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenServiceServer).CreateShortUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortenService_CreateShortUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenServiceServer).CreateShortUrl(ctx, req.(*OriginalUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortenService_GetOriginalUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenServiceServer).GetOriginalUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UrlShortenService_GetOriginalUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenServiceServer).GetOriginalUrl(ctx, req.(*ShortUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlShortenService_ServiceDesc is the grpc.ServiceDesc for UrlShortenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlShortenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "url.UrlShortenService",
	HandlerType: (*UrlShortenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortUrl",
			Handler:    _UrlShortenService_CreateShortUrl_Handler,
		},
		{
			MethodName: "GetOriginalUrl",
			Handler:    _UrlShortenService_GetOriginalUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/url.proto",
}
